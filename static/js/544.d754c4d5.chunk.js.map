{"version":3,"file":"static/js/544.d754c4d5.chunk.js","mappings":"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","sources":["pages/Home/Home.jsx","services/themoviedbAPI.js"],"sourcesContent":["import { Button, MovieList, Notification, SkeletonMovie } from 'components';\n\nimport { useEffect, useState } from 'react';\nimport { TMDB_API } from 'services';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const getTrendingAllDay = async () => {\n      setIsLoading(true);\n      try {\n        const response = await TMDB_API.getTrendMovieByParam('day', controller);\n\n        setMovies(response);\n        setError(false);\n        setIsLoading(false);\n      } catch (error) {\n        if (error.message === 'canceled') return;\n\n        setError(error.message);\n        setIsLoading(false);\n      }\n    };\n    getTrendingAllDay();\n\n    return () => controller.abort();\n  }, []);\n\n  return (\n    <>\n      <Notification $marginBottom={'25px'}>\n        {!error && 'In trend Today'}\n        {error && `‚ùå Something went wrong - ${error}`}\n      </Notification>\n      {!isLoading && <MovieList movies={movies} />}\n      {isLoading && <SkeletonMovie />}\n\n      <Button $marginLeft={'auto'}>{'Load More'}</Button>\n    </>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '267e0ef2e56c2254d403c0d4ffe19052';\n\nconst getTrendMovieByParam = async (param, controller) => {\n  const response = await axios.get(\n    `trending/movie/${param}?api_key=${API_KEY}`,\n    {\n      signal: controller.signal,\n    }\n  );\n  return response.data.results;\n};\n\nconst getMovieByMovieId = async (movieId, controller) => {\n  const response = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`, {\n    signal: controller.signal,\n  });\n  return response.data;\n};\n\nconst getMovieCastByMovieId = async (movieId, controller) => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}`,\n    {\n      signal: controller.signal,\n    }\n  );\n  return response.data.cast;\n  //  return response.data.cast.sort((prevActor, nextActor) => nextActor.popularity - prevActor.popularity);\n};\n\nconst getMovieReviewsByMovieId = async (movieId, controller) => {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}`,\n    {\n      signal: controller.signal,\n    }\n  );\n  return response.data.results;\n};\n\nconst searchMovieByQuery = async (query, controller) => {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${query}`,\n    {\n      signal: controller.signal,\n    }\n  );\n  return response.data.results;\n};\n\nexport const TMDB_API = {\n  getTrendMovieByParam,\n  getMovieByMovieId,\n  getMovieReviewsByMovieId,\n  getMovieCastByMovieId,\n  searchMovieByQuery,\n};\n"],"names":["_useState","useState","_useState2","_slicedToArray","movies","setMovies","_useState3","_useState4","error","setError","_useState5","_useState6","isLoading","setIsLoading","useEffect","controller","AbortController","getTrendingAllDay","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","TMDB_API","getTrendMovieByParam","sent","t0","message","abrupt","stop","apply","arguments","abort","_jsxs","_Fragment","children","Notification","$marginBottom","concat","_jsx","MovieList","SkeletonMovie","Button","$marginLeft","axios","defaults","baseURL","API_KEY","param","get","signal","data","results","_x","_x2","getMovieByMovieId","_ref2","_callee2","movieId","_context2","_x3","_x4","getMovieCastByMovieId","_ref3","_callee3","_context3","cast","_x5","_x6","getMovieReviewsByMovieId","_ref4","_callee4","_context4","_x7","_x8","searchMovieByQuery","_ref5","_callee5","query","_context5","_x9","_x10"],"sourceRoot":""}