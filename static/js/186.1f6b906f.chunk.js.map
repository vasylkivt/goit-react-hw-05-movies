{"version":3,"file":"static/js/186.1f6b906f.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.jsx","services/themoviedbAPI.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { TMDB_API } from 'services';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n\n  const [reviews, setReviews] = useState();\n\n  useEffect(() => {\n    if (!movieId) return;\n    const controller = new AbortController();\n\n    const getMovieReviewsByMovieId = async () => {\n      try {\n        const response = await TMDB_API.getMovieReviewsByMovieId(\n          movieId,\n          controller\n        );\n\n        setReviews(response);\n      } catch (error) {}\n    };\n    getMovieReviewsByMovieId();\n\n    return () => controller.abort();\n  }, [movieId]);\n  return (\n    <>\n      {reviews && (\n        <div>\n          {reviews.map(({ author, content, id }) => {\n            return (\n              <div key={id}>\n                <p>Author: {author}</p>\n                <p>Desk:{content} </p>\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '267e0ef2e56c2254d403c0d4ffe19052';\n\nconst getTrendMovieByParam = async (param, controller) => {\n  const response = await axios.get(\n    `trending/movie/${param}?api_key=${API_KEY}`,\n    {\n      signal: controller.signal,\n    }\n  );\n  return response.data.results;\n};\n\nconst getMovieByMovieId = async (movieId, controller) => {\n  const response = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`, {\n    signal: controller.signal,\n  });\n  return response.data;\n};\n\nconst getMovieCastByMovieId = async (movieId, controller) => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}`,\n    {\n      signal: controller.signal,\n    }\n  );\n  return response.data.cast;\n  //  return response.data.cast.sort((prevActor, nextActor) => nextActor.popularity - prevActor.popularity);\n};\n\nconst getMovieReviewsByMovieId = async (movieId, controller) => {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}`,\n    {\n      signal: controller.signal,\n    }\n  );\n  return response.data.results;\n};\n\nconst searchMovieByQuery = async (query, controller) => {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${query}`,\n    {\n      signal: controller.signal,\n    }\n  );\n  return response.data.results;\n};\n\nexport const TMDB_API = {\n  getTrendMovieByParam,\n  getMovieByMovieId,\n  getMovieReviewsByMovieId,\n  getMovieCastByMovieId,\n  searchMovieByQuery,\n};\n"],"names":["movieId","useParams","_useState","useState","_useState2","_slicedToArray","reviews","setReviews","useEffect","controller","AbortController","getMovieReviewsByMovieId","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","TMDB_API","sent","t0","stop","apply","arguments","abort","_jsx","_Fragment","children","map","_ref2","author","content","id","_jsxs","axios","defaults","baseURL","API_KEY","getTrendMovieByParam","param","get","concat","signal","abrupt","data","results","_x","_x2","getMovieByMovieId","_callee2","_context2","_x3","_x4","getMovieCastByMovieId","_ref3","_callee3","_context3","cast","_x5","_x6","_ref4","_callee4","_context4","_x7","_x8","searchMovieByQuery","_ref5","_callee5","query","_context5","_x9","_x10"],"sourceRoot":""}