{"version":3,"file":"static/js/544.da667706.chunk.js","mappings":"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","sources":["pages/Home/Home.jsx","services/themoviedbAPI.js"],"sourcesContent":["import { MovieList, Notification, SkeletonMovie } from 'components';\n\nimport { useEffect, useState } from 'react';\nimport { TMDB_API } from 'services';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const getTrendingAllDay = async () => {\n      setIsLoading(true);\n      try {\n        const response = await TMDB_API.getTrendMovieByParam('day', controller);\n\n        setMovies(response);\n        setError(false);\n        setIsLoading(false);\n      } catch (error) {\n        if (error.message === 'canceled') return;\n\n        setError(error.message);\n        setIsLoading(false);\n      }\n    };\n    getTrendingAllDay();\n\n    return () => controller.abort();\n  }, []);\n\n  return (\n    <>\n      <Notification $marginBottom={'25px'}>\n        {!error && 'In trend Today'}\n        {error && `‚ùå Something went wrong - ${error}`}\n      </Notification>\n      {!isLoading && <MovieList movies={movies} />}\n      {isLoading && <SkeletonMovie />}\n    </>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '267e0ef2e56c2254d403c0d4ffe19052';\n\nconst getTrendMovieByParam = async (param, controller) => {\n  const response = await axios.get(\n    `trending/movie/${param}?api_key=${API_KEY}`,\n    {\n      signal: controller.signal,\n    }\n  );\n\n  return response.data.results;\n};\n\nconst getMovieByMovieId = async (movieId, controller) => {\n  const response = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`, {\n    signal: controller.signal,\n  });\n  return response.data;\n};\n\nconst getMovieCastByMovieId = async (movieId, controller) => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}`,\n    {\n      signal: controller.signal,\n    }\n  );\n  return response.data.cast;\n  //  return response.data.cast.sort((prevActor, nextActor) => nextActor.popularity - prevActor.popularity);\n};\n\nconst getMovieReviewsByMovieId = async (movieId, controller) => {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}`,\n    {\n      signal: controller.signal,\n    }\n  );\n  return response.data.results;\n};\n\nconst searchMovieByQuery = async (query, page, controller) => {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${query}&page=${page}`,\n    {\n      signal: controller.signal,\n    }\n  );\n\n  return response.data;\n};\n\nexport const TMDB_API = {\n  getTrendMovieByParam,\n  getMovieByMovieId,\n  getMovieReviewsByMovieId,\n  getMovieCastByMovieId,\n  searchMovieByQuery,\n};\n"],"names":["_useState","useState","_useState2","_slicedToArray","movies","setMovies","_useState3","_useState4","error","setError","_useState5","_useState6","isLoading","setIsLoading","useEffect","controller","AbortController","getTrendingAllDay","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","TMDB_API","getTrendMovieByParam","sent","t0","message","abrupt","stop","apply","arguments","abort","_jsxs","_Fragment","children","Notification","$marginBottom","concat","_jsx","MovieList","SkeletonMovie","axios","defaults","baseURL","API_KEY","param","get","signal","data","results","_x","_x2","getMovieByMovieId","_ref2","_callee2","movieId","_context2","_x3","_x4","getMovieCastByMovieId","_ref3","_callee3","_context3","cast","_x5","_x6","getMovieReviewsByMovieId","_ref4","_callee4","_context4","_x7","_x8","searchMovieByQuery","_ref5","_callee5","query","page","_context5","_x9","_x10","_x11"],"sourceRoot":""}